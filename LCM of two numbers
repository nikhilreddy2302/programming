
C- source file
#include <stdio.h>  
  
// Recursive function to return gcd of a and b  
int gcd(int a, int b)  
{  
    // Everything divides 0  
    if (a == 0 || b == 0)  
        return 0;  
  
    // Base case     
    if (a == b)  
        return a;  
  
    // a is greater  
    if (a > b)  
        return gcd(a-b, b);  
    return gcd(a, b-a);  
}  
  
// Function to return LCM of two numbers  
int lcm(int a, int b)  
{  
    return (a*b)/gcd(a, b);  
}  
  
// Driver program to test above function  
int main()  
{  
    int a = 15, b = 20;  
    printf("LCM of %d and %d is %d ", a, b, lcm(a, b));  
    return 0;  
}  
----------------------------------------------------------------
C++ -Source file
#include <iostream>  
using namespace std; 
// Recursive function to return gcd of a and b  
class gfg 
{ 
 public : int gcd(int a, int b)  
 {  
    // Everything divides 0  
    if (a == 0 || b == 0)  
        return 0;  
   
    // Base case     
    if (a == b)  
        return a;  
   
    // a is greater  
    if (a > b)  
        return gcd(a-b, b);  
    return gcd(a, b-a);  
 } 
  
   
// Function to return LCM of two numbers  
  int lcm(int a, int b)  
 {  
    return (a*b)/gcd(a, b);  
 }  
} ; 
// Driver program to test above function  
int main()  
{  
    gfg g; 
    int a = 15, b = 20;  
    cout<<"LCM of "<<a<<" and "<<b<<" is "<<g.lcm(a, b);  
    return 0;  
}  
-----------------------------------------------------------
//JAVA - Source file
class Gfg 
{ 
	// Recursive method to return gcd of a and b 
	static int gcd(int a, int b) 
	{ 
		// Everything divides 0 
		if (a == 0 || b == 0) 
		return 0; 
	
		// base case 
		if (a == b) 
			return a; 
	
		// a is greater 
		if (a > b) 
			return gcd(a-b, b); 
		return gcd(a, b-a); 
	} 
	
	// method to return LCM of two numbers 
	static int lcm(int a, int b) 
	{ 
		return (a*b)/gcd(a, b); 
	} 
	
	// Driver method 
	public static void main(String[] args) 
	{ 
		int a = 15, b = 25; 
		System.out.println("LCM of " + a +" and " + b + " is " + lcm(a, b)); 
	} 
} 
